{{- $deployName := printf "%s-%s" .Release.Name "server" -}}
# - Remove the empty white line
# $deployName :=  ...         Initialize a variable, inferring the type
# printf "%s-%s" FirstArgument SecondArgument ...   Way to pass arguments to printf

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $deployName }}
  namespace: {{ .Release.Namespace}}
spec:
  selector:
    matchLabels:
      app: {{ $deployName }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        app: {{ $deployName }}
      {{- if .Values.podAnnotations }}
      annotations:
        # Iterate through a map, like in Go, except adding $ to indicate it as dynamic template
        {{- range $key, $value := .Values.podAnnotations }}
        # Next, it's to declare a map ?
        {{ $key | quote }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
      containers:
      - name: myapp
        image: {{ required "An image is required" .Values.image }}
        ports:
        - containerPort: 5000
        env:
          - name: foo
            value: bar
          # Conditional to check if .Values.customVar exists, because if not, we would get an error from Kubernetes
          {{- if .Values.customVar }}
          - name: CUSTOM_VAR
            value: {{ .Values.customVar}}
          {{- end }}
